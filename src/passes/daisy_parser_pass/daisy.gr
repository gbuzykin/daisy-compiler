%start preproc_condition

# Tokens
%token end_of_file
%token end_of_input
%token bool_literal
%token int_literal
%token float_literal
%token string_literal
%token id
%token ellipsis
%token scope_resolution
%token concatenate

# Operators
%token inc
%token dec
%token shl
%token shr
%token eq
%token ne
%token le
%token ge
%token and
%token or
%token add_assign
%token sub_assign
%token mul_assign
%token div_assign
%token mod_assign
%token and_assign
%token or_assign
%token xor_assign
%token shl_assign
%token shr_assign
%token arrow

# Keywords
%token const
%token namespace

# Operator precedence
%right '?' ':'
%left or
%left and
%left '|'
%left '^'
%left '&'
%nonassoc eq ne
%nonassoc '<' le '>' ge
%left shl shr
%left '+' '-'
%left '*' '/' '%'
%right '!' '~' $unary

# Actions
%action preproc_op_u_minus
%action preproc_op_u_plus
%action preproc_op_binary_not
%action preproc_op_add
%action preproc_op_sub
%action preproc_op_mul
%action preproc_op_div
%action preproc_op_mod
%action preproc_op_shl
%action preproc_op_shr
%action preproc_op_binary_and
%action preproc_op_binary_or
%action preproc_op_binary_xor
%action preproc_op_eq
%action preproc_op_ne
%action preproc_op_lt
%action preproc_op_le
%action preproc_op_ge
%action preproc_op_gt
%action preproc_op_logical_not
%action preproc_op_logical_and
%action preproc_op_logical_or
%action preproc_op_conditional
%action preproc_brackets
%action preproc_operator_begin
%action preproc_operator_end

%action begin_namespace
%action end_namespace

%%

# Preprocessor condition expression
preproc_condition<preproc_condition> : preproc_expr [end_of_input] ;

preproc_expr : '-' preproc_expr %prec $unary {preproc_op_u_minus}
  | '+' preproc_expr %prec $unary {preproc_op_u_plus}
  | '~' preproc_expr %prec $unary {preproc_op_binary_not}
  | preproc_expr '+' preproc_expr {preproc_op_add}
  | preproc_expr '-' preproc_expr {preproc_op_sub}
  | preproc_expr '*' preproc_expr {preproc_op_mul}
  | preproc_expr '/' preproc_expr {preproc_op_div}
  | preproc_expr '%' preproc_expr {preproc_op_mod}
  | preproc_expr [shl] preproc_expr {preproc_op_shl}
  | preproc_expr [shr] preproc_expr {preproc_op_shr}
  | preproc_expr '&' preproc_expr {preproc_op_binary_and}
  | preproc_expr '|' preproc_expr {preproc_op_binary_or}
  | preproc_expr '^' preproc_expr {preproc_op_binary_xor}
  | preproc_expr [eq] preproc_expr {preproc_op_eq}
  | preproc_expr [ne] preproc_expr {preproc_op_ne}
  | preproc_expr '<' preproc_expr {preproc_op_lt}
  | preproc_expr [le] preproc_expr {preproc_op_le}
  | preproc_expr '>' preproc_expr {preproc_op_gt}
  | preproc_expr [ge] preproc_expr {preproc_op_ge}
  | '!' preproc_expr %prec $unary {preproc_op_logical_not}
  | preproc_expr [and] preproc_expr {preproc_op_logical_and}
  | preproc_expr [or] preproc_expr {preproc_op_logical_or}
  | preproc_expr '?' preproc_expr ':' preproc_expr {preproc_op_conditional}
  | '(' preproc_expr ')' {preproc_brackets}
  | [id] {preproc_operator_begin} '(' [id] ')' {preproc_operator_end}
  | [bool_literal]
  | [int_literal]
  ;

# Translation unit
translation_unit<initial> : unit_contents [end_of_file] ;
unit_contents : unit_contents unit_item
  | #empty
  ;

unit_item : [namespace] [id] '{' {begin_namespace} unit_contents '}' {end_namespace}
  | [const] [id] '=' expr ';'
  | $error ';'
  | ';'
  ;

expr : '-' expr %prec $unary
  | '+' expr %prec $unary
  | '~' expr %prec $unary
  | expr '+' expr
  | expr '-' expr
  | expr '*' expr
  | expr '/' expr
  | expr '%' expr
  | expr [shl] expr
  | expr [shr] expr
  | expr '&' expr
  | expr '|' expr
  | expr '^' expr
  | expr [eq] expr
  | expr [ne] expr
  | expr '<' expr
  | expr [le] expr
  | expr '>' expr
  | expr [ge] expr
  | '!' expr %prec $unary
  | expr [and] expr
  | expr [or] expr
  | expr '?' expr ':' expr
  | '(' expr ')'
  | [id]
  | [bool_literal]
  | [int_literal]
  | [float_literal]
  | string
  ;

string : [string_literal]
  | string [string_literal]
  ;

%%
