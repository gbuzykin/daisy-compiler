%start preproc_condition

# Tokens
%token end_of_file
%token end_of_input
%token bool_literal
%token int_literal
%token float_literal
%token string_literal
%token id
%token ellipsis
%token scope_resolution
%token concatenate

# Operators
%token shl
%token shr
%token eq
%token ne
%token le
%token ge
%token and
%token or
%token add_assign
%token sub_assign
%token mul_assign
%token div_assign
%token mod_assign
%token and_assign
%token or_assign
%token xor_assign
%token shl_assign
%token shr_assign
%token arrow

# Keywords
%token namespace
%token const
%token let
%token if
%token else
%token loop
%token while

# Operator precedence
%right '?' ':'
%left or
%left and
%left '|'
%left '^'
%left '&'
%nonassoc eq ne
%nonassoc '<' le '>' ge
%left shl shr
%left '+' '-'
%left '*' '/' '%'
%right '!' '~' $unary

# Actions

%action begin_namespace
%action end_block
%action concatenate_string_const
%action relative_name
%action absolute_name
%action concatenate_name_path

%action bool_const_literal
%action int_const_literal
%action float_const_literal
%action string_const_literal

%action expr_op_u_minus
%action expr_op_u_plus
%action expr_op_add
%action expr_op_sub
%action expr_op_mul
%action expr_op_div
%action expr_op_mod
%action expr_op_shl
%action expr_op_shr
%action expr_op_bitwise_not
%action expr_op_bitwise_and
%action expr_op_bitwise_or
%action expr_op_bitwise_xor
%action expr_op_eq
%action expr_op_ne
%action expr_op_lt
%action expr_op_le
%action expr_op_ge
%action expr_op_gt
%action expr_op_logical_not
%action expr_op_logical_and
%action expr_op_logical_or
%action expr_op_conditional
%action expr_brackets
%action expr_name_ref

%action define_const
%action define_variable
%action define_variable_default

%action begin_block_expr
%action push_expr_result
%action discard_expr_result

# --------------------------------------------
# Preprocessor actions
%action preproc_op_u_minus
%action preproc_op_u_plus
%action preproc_op_add
%action preproc_op_sub
%action preproc_op_mul
%action preproc_op_div
%action preproc_op_mod
%action preproc_op_shl
%action preproc_op_shr
%action preproc_op_bitwise_not
%action preproc_op_bitwise_and
%action preproc_op_bitwise_or
%action preproc_op_bitwise_xor
%action preproc_op_eq
%action preproc_op_ne
%action preproc_op_lt
%action preproc_op_le
%action preproc_op_ge
%action preproc_op_gt
%action preproc_op_logical_not
%action preproc_op_logical_and
%action preproc_op_logical_or
%action preproc_op_conditional
%action preproc_brackets
%action preproc_operator_begin
%action preproc_operator_end

%%

# -------------------------------------------------------------------------------------
# Translation unit
translation_unit<initial> : unit_contents [end_of_file] ;
unit_contents : unit_contents unit_item
  | #empty
  ;

unit_item : [namespace] [id] '{' {begin_namespace} unit_contents '}' {end_block}
  | [const] const_decl_list ';'
  | $error ';'
  | ';'
  ;

# -------------------------------------------------------------------------------------
# Declarations

const_decl_list : const_def
  | const_decl_list ',' const_def
  ;

const_def : [id] optional_type_spec '=' expr {define_const} ;

var_decl_list : var_def
  | var_decl_list ',' var_def
  ;

var_def : [id] optional_type_spec '=' expr {define_variable}
  | [id] ':' type_spec {define_variable_default}
  ;

optional_type_spec : ':' type_spec
  | #empty
  ;

type_spec : name_spec ;

# -------------------------------------------------------------------------------------
# Complex expressions with blocks
block_expr : '{' {begin_block_expr} statement_list optional_expr '}' {end_block} ;

if_expr : [if] if_condition block_expr
  | [if] if_condition block_expr [else] if_or_block_expr
  ;

if_condition : expr
  | $error
  ;

if_or_block_expr : if_expr
  | block_expr
  ;

loop_expr : [loop] block_expr
  | [while] if_condition block_expr
  ;

statement_list : statement_list statement
  | #empty
  ;

optional_expr : expr {push_expr_result}
  | $error
  | #empty
  ;

complex_expr : block_expr
  | if_expr
  | loop_expr
  ;

statement : expr ';' {discard_expr_result}
  | [const] const_decl_list ';'
  | [let] var_decl_list ';'
  | $error ';'
  | ';'
  ;

# -------------------------------------------------------------------------------------
# Expressions
expr : '-' expr %prec $unary {expr_op_u_minus}
  | '+' expr %prec $unary {expr_op_u_plus}
  | expr '+' expr {expr_op_add}
  | expr '-' expr {expr_op_sub}
  | expr '*' expr {expr_op_mul}
  | expr '/' expr {expr_op_div}
  | expr '%' expr {expr_op_mod}
  | expr [shl] expr {expr_op_shl}
  | expr [shr] expr {expr_op_shr}
  | '~' expr %prec $unary {expr_op_bitwise_not}
  | expr '&' expr {expr_op_bitwise_and}
  | expr '|' expr {expr_op_bitwise_or}
  | expr '^' expr {expr_op_bitwise_xor}
  | expr [eq] expr {expr_op_eq}
  | expr [ne] expr {expr_op_ne}
  | expr '<' expr {expr_op_lt}
  | expr [le] expr {expr_op_le}
  | expr '>' expr {expr_op_ge}
  | expr [ge] expr {expr_op_gt}
  | '!' expr %prec $unary {expr_op_logical_not}
  | expr [and] expr {expr_op_logical_and}
  | expr [or] expr {expr_op_logical_or}
  | expr '?' expr ':' expr {expr_op_conditional}
  | '(' expr ')' {expr_brackets}
  | name_spec {expr_name_ref}
  | const_literal
  | complex_expr
  ;

# -------------------------------------------------------------------------------------
# Auxiliary
name_spec : [id] {relative_name}
  | [scope_resolution] [id] {absolute_name}
  | name_spec [scope_resolution] [id] {concatenate_name_path}
  ;

string_const : [string_literal]
  | string_const [string_literal] {concatenate_string_const}
  ;

const_literal : [bool_literal] {bool_const_literal}
  | [int_literal] {int_const_literal}
  | [float_literal] {float_const_literal}
  | string_const {string_const_literal}
  ;

# -------------------------------------------------------------------------------------
# Preprocessor condition expression
preproc_condition<preproc_condition> : preproc_expr [end_of_input] ;

preproc_expr : '-' preproc_expr %prec $unary {preproc_op_u_minus}
  | '+' preproc_expr %prec $unary {preproc_op_u_plus}
  | preproc_expr '+' preproc_expr {preproc_op_add}
  | preproc_expr '-' preproc_expr {preproc_op_sub}
  | preproc_expr '*' preproc_expr {preproc_op_mul}
  | preproc_expr '/' preproc_expr {preproc_op_div}
  | preproc_expr '%' preproc_expr {preproc_op_mod}
  | preproc_expr [shl] preproc_expr {preproc_op_shl}
  | preproc_expr [shr] preproc_expr {preproc_op_shr}
  | '~' preproc_expr %prec $unary {preproc_op_bitwise_not}
  | preproc_expr '&' preproc_expr {preproc_op_bitwise_and}
  | preproc_expr '|' preproc_expr {preproc_op_bitwise_or}
  | preproc_expr '^' preproc_expr {preproc_op_bitwise_xor}
  | preproc_expr [eq] preproc_expr {preproc_op_eq}
  | preproc_expr [ne] preproc_expr {preproc_op_ne}
  | preproc_expr '<' preproc_expr {preproc_op_lt}
  | preproc_expr [le] preproc_expr {preproc_op_le}
  | preproc_expr '>' preproc_expr {preproc_op_gt}
  | preproc_expr [ge] preproc_expr {preproc_op_ge}
  | '!' preproc_expr %prec $unary {preproc_op_logical_not}
  | preproc_expr [and] preproc_expr {preproc_op_logical_and}
  | preproc_expr [or] preproc_expr {preproc_op_logical_or}
  | preproc_expr '?' preproc_expr ':' preproc_expr {preproc_op_conditional}
  | '(' preproc_expr ')' {preproc_brackets}
  | [id] {preproc_operator_begin} '(' [id] ')' {preproc_operator_end}
  | [bool_literal]
  | [int_literal]
  ;

%%
