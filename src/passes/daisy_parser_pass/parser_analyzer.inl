/* Parsegen autogenerated analyzer file - do not edit! */
/* clang-format off */

static int action_idx[131] = {
    0, 2, 20, 2, 2, 2, 2, 2, 62, 64, 66, 70, 74, 78, 82, 84, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    86, 122, 156, 172, 188, 212, 236, 248, 260, 292, 322, 2, 364, 404, 420, 436, 438, 446, 454, 456, 484, 486, 488, 490,
    532, 534, 536, 538, 548, 550, 552, 556, 558, 562, 566, 588, 630, 566, 566, 566, 566, 566, 634, 636, 638, 640, 642,
    644, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 646, 682, 716,
    732, 748, 772, 796, 808, 820, 852, 882, 566, 924, 964, 980, 996, 998, 1006, 1014, 1016, 1044, 1046, 1048, 1050,
    1092, 1094, 1096, 1098, 1100
};

static int action_list[1102] = {
    -1, 192, 33, 7, 40, 9, 43, 11, 45, 13, 126, 15, 261, 17, 262, 19, 265, 21, -1, -1, 37, 33, 38, 35, 42, 37, 43, 39,
    45, 41, 47, 43, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 260, 123, 271, 55, 272, 57, 273, 59, 274, 61, 275, 63, 276,
    65, 277, 67, 278, 69, -1, -1, -1, 168, -1, 174, 40, 156, -1, 150, 40, 25, -1, -1, 265, 27, -1, -1, 41, 29, -1, -1,
    -1, 162, -1, 18, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 94, 51, 124, 53, 271, 55, 272, 57,
    273, 59, 274, 61, 275, 63, 276, 65, 277, 67, -1, 132, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62,
    47, 94, 51, 124, 53, 271, 55, 272, 57, 273, 59, 274, 61, 275, 63, 276, 65, -1, 126, 37, 33, 42, 37, 43, 39, 45, 41,
    47, 43, 271, 55, 272, 57, -1, 114, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 271, 55, 272, 57, -1, 102, 37, 33, 42,
    37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 271, 55, 272, 57, 275, 63, 276, 65, -1, 90, 37, 33, 42, 37, 43, 39, 45,
    41, 47, 43, 60, 45, 62, 47, 271, 55, 272, 57, 275, 63, 276, 65, -1, 84, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, -1,
    60, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, -1, 54, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47,
    94, 51, 271, 55, 272, 57, 273, 59, 274, 61, 275, 63, 276, 65, -1, 72, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47,
    43, 60, 45, 62, 47, 271, 55, 272, 57, 273, 59, 274, 61, 275, 63, 276, 65, -1, 78, 37, 33, 38, 35, 42, 37, 43, 39,
    45, 41, 47, 43, 58, 93, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 271, 55, 272, 57, 273, 59, 274, 61, 275, 63, 276,
    65, 277, 67, 278, 69, -1, -1, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 63, 49, 94, 51, 124,
    53, 271, 55, 272, 57, 273, 59, 274, 61, 275, 63, 276, 65, 277, 67, 278, 69, -1, 138, 37, 33, 42, 37, 43, 39, 45, 41,
    47, 43, 271, 55, 272, 57, -1, 108, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 271, 55, 272, 57, -1, 96, -1, 42, 37, 33,
    42, 37, 47, 43, -1, 30, 37, 33, 42, 37, 47, 43, -1, 24, -1, 36, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62,
    47, 271, 55, 272, 57, 273, 59, 274, 61, 275, 63, 276, 65, -1, 66, -1, 48, -1, 6, -1, 12, 37, 33, 38, 35, 41, 119,
    42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 271, 55, 272, 57, 273, 59, 274, 61, 275,
    63, 276, 65, 277, 67, 278, 69, -1, -1, -1, 144, -1, 120, -1, -1, 59, 129, 258, 131, 259, 133, 290, 135, -1, -1, -1,
    186, -1, 210, 59, 261, -1, -1, -1, 180, 265, 137, -1, -1, 61, 139, -1, -1, 33, 145, 40, 147, 43, 149, 45, 151, 126,
    153, 261, 155, 262, 157, 263, 159, 264, 161, 265, 163, -1, -1, 37, 167, 38, 169, 42, 171, 43, 173, 45, 175, 47, 177,
    59, 259, 60, 179, 62, 181, 63, 183, 94, 185, 124, 187, 271, 189, 272, 191, 273, 193, 274, 195, 275, 197, 276, 199,
    277, 201, 278, 203, -1, -1, 264, 257, -1, 384, -1, 366, -1, 372, -1, 378, -1, 390, -1, 360, -1, 228, 37, 167, 38,
    169, 42, 171, 43, 173, 45, 175, 47, 177, 60, 179, 62, 181, 94, 185, 124, 187, 271, 189, 272, 191, 273, 193, 274,
    195, 275, 197, 276, 199, 277, 201, -1, 342, 37, 167, 38, 169, 42, 171, 43, 173, 45, 175, 47, 177, 60, 179, 62, 181,
    94, 185, 124, 187, 271, 189, 272, 191, 273, 193, 274, 195, 275, 197, 276, 199, -1, 336, 37, 167, 42, 171, 43, 173,
    45, 175, 47, 177, 271, 189, 272, 191, -1, 324, 37, 167, 42, 171, 43, 173, 45, 175, 47, 177, 271, 189, 272, 191, -1,
    312, 37, 167, 42, 171, 43, 173, 45, 175, 47, 177, 60, 179, 62, 181, 271, 189, 272, 191, 275, 197, 276, 199, -1, 300,
    37, 167, 42, 171, 43, 173, 45, 175, 47, 177, 60, 179, 62, 181, 271, 189, 272, 191, 275, 197, 276, 199, -1, 294, 37,
    167, 42, 171, 43, 173, 45, 175, 47, 177, -1, 270, 37, 167, 42, 171, 43, 173, 45, 175, 47, 177, -1, 264, 37, 167, 38,
    169, 42, 171, 43, 173, 45, 175, 47, 177, 60, 179, 62, 181, 94, 185, 271, 189, 272, 191, 273, 193, 274, 195, 275,
    197, 276, 199, -1, 282, 37, 167, 38, 169, 42, 171, 43, 173, 45, 175, 47, 177, 60, 179, 62, 181, 271, 189, 272, 191,
    273, 193, 274, 195, 275, 197, 276, 199, -1, 288, 37, 167, 38, 169, 42, 171, 43, 173, 45, 175, 47, 177, 58, 227, 60,
    179, 62, 181, 63, 183, 94, 185, 124, 187, 271, 189, 272, 191, 273, 193, 274, 195, 275, 197, 276, 199, 277, 201, 278,
    203, -1, -1, 37, 167, 38, 169, 42, 171, 43, 173, 45, 175, 47, 177, 60, 179, 62, 181, 63, 183, 94, 185, 124, 187,
    271, 189, 272, 191, 273, 193, 274, 195, 275, 197, 276, 199, 277, 201, 278, 203, -1, 348, 37, 167, 42, 171, 43, 173,
    45, 175, 47, 177, 271, 189, 272, 191, -1, 318, 37, 167, 42, 171, 43, 173, 45, 175, 47, 177, 271, 189, 272, 191, -1,
    306, -1, 252, 37, 167, 42, 171, 47, 177, -1, 240, 37, 167, 42, 171, 47, 177, -1, 234, -1, 246, 37, 167, 42, 171, 43,
    173, 45, 175, 47, 177, 60, 179, 62, 181, 271, 189, 272, 191, 273, 193, 274, 195, 275, 197, 276, 199, -1, 276, -1,
    258, -1, 216, -1, 222, 37, 167, 38, 169, 41, 253, 42, 171, 43, 173, 45, 175, 47, 177, 60, 179, 62, 181, 63, 183, 94,
    185, 124, 187, 271, 189, 272, 191, 273, 193, 274, 195, 275, 197, 276, 199, 277, 201, 278, 203, -1, -1, -1, 354, -1,
    330, -1, 396, -1, 198, -1, 204
};

static int reduce_info[201] = {
    2, 0, 0, 2, 2, 1, 2, 2, 2, 2, 2, 3, 3, 2, 4, 3, 2, 5, 3, 2, 6, 3, 2, 7, 3, 2, 8, 3, 2, 9, 3, 2, 10, 3, 2, 11, 3, 2,
    12, 3, 2, 13, 3, 2, 14, 3, 2, 15, 3, 2, 16, 3, 2, 17, 3, 2, 19, 3, 2, 18, 2, 2, 20, 3, 2, 21, 3, 2, 22, 5, 2, 23, 3,
    2, 24, 1, 2, 25, 0, 54, 26, 5, 2, 27, 1, 2, 0, 1, 2, 0, 2, 56, 0, 2, 58, 0, 0, 58, 0, 5, 60, 0, 2, 60, 0, 1, 60, 0,
    2, 62, 0, 2, 62, 0, 2, 62, 0, 3, 62, 0, 3, 62, 0, 3, 62, 0, 3, 62, 0, 3, 62, 0, 3, 62, 0, 3, 62, 0, 3, 62, 0, 3, 62,
    0, 3, 62, 0, 3, 62, 0, 3, 62, 0, 3, 62, 0, 3, 62, 0, 3, 62, 0, 3, 62, 0, 2, 62, 0, 3, 62, 0, 3, 62, 0, 5, 62, 0, 3,
    62, 0, 1, 62, 0, 1, 62, 0, 1, 62, 0, 1, 62, 0, 1, 62, 0, 1, 114, 0, 2, 114, 0
};

static int goto_list[116] = {
    -1, 0, 3, 60, 4, 58, 5, 57, 6, 56, 7, 15, 16, 55, 17, 54, 18, 53, 19, 52, 20, 51, 21, 50, 22, 49, 23, 48, 24, 45,
    25, 44, 26, 43, 27, 42, 28, 41, 29, 40, 30, 39, 31, 38, 32, 37, 33, 36, 34, 35, 46, 47, -1, 2, -1, 11, -1, 0, -1,
    62, -1, 63, 72, 127, 73, 125, 74, 124, 75, 123, 76, 82, 83, 122, 84, 121, 85, 120, 86, 119, 87, 118, 88, 117, 89,
    116, 90, 115, 91, 112, 92, 111, 93, 110, 94, 109, 95, 108, 96, 107, 97, 106, 98, 105, 99, 104, 100, 103, 101, 102,
    113, 114, -1, 70, -1, 71
};

static int parse(int tt, int* sptr0, int** p_sptr, int rise_error) {
    enum { kShiftFlag = 1, kFlagCount = 1 };
    int action = rise_error;
    if (action >= 0) {
        const int* action_tbl = &action_list[action_idx[*(*p_sptr - 1)]];
        while (action_tbl[0] >= 0 && action_tbl[0] != tt) { action_tbl += 2; }
        action = action_tbl[1];
    }
    if (action >= 0) {
        if (!(action & kShiftFlag)) {
            const int* info = &reduce_info[action >> kFlagCount];
            const int* goto_tbl = &goto_list[info[1]];
            int state = *((*p_sptr -= info[0]) - 1);
            while (goto_tbl[0] >= 0 && goto_tbl[0] != state) { goto_tbl += 2; }
            *(*p_sptr)++ = goto_tbl[1];
            return predef_act_reduce + info[2];
        }
        *(*p_sptr)++ = action >> kFlagCount;
        return predef_act_shift;
    }
    /* Roll back to state, which can accept error */
    do {
        const int* action_tbl = &action_list[action_idx[*(*p_sptr - 1)]];
        while (action_tbl[0] >= 0 && action_tbl[0] != predef_tt_error) { action_tbl += 2; }
        if (action_tbl[1] >= 0 && (action_tbl[1] & kShiftFlag)) { /* Can recover */
            *(*p_sptr)++ = action_tbl[1] >> kFlagCount;           /* Shift error token */
            break;
        }
    } while (--*p_sptr != sptr0);
    return action;
}
