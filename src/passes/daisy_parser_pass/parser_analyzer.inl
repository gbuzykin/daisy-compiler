/* Parsegen autogenerated analyzer file - do not edit! */
/* clang-format off */

static int action_idx[16] = {
    0, 2, 10, 12, 14, 16, 20, 24, 34, 38, 42, 44, 46, 48, 50, 52
};

static int action_list[54] = {
    -1, 12, 59, 7, 259, 9, 290, 11, -1, -1, -1, 6, -1, 24, -1, 0, 265, 13, -1, -1, 61, 15, -1, -1, 261, 21, 262, 23,
    263, 25, 264, 27, -1, -1, 59, 31, -1, -1, 264, 29, -1, 48, -1, 30, -1, 36, -1, 42, -1, 54, -1, 60, -1, 18
};

static int reduce_info[33] = {
    2, 0, 0, 2, 2, 0, 0, 2, 0, 5, 4, 0, 1, 4, 0, 1, 6, 0, 1, 6, 0, 1, 6, 0, 1, 6, 0, 1, 8, 0, 2, 8, 0
};

static int goto_list[10] = {
    -1, 0, -1, 1, -1, 2, -1, 8, -1, 9
};

static int parse(int tt, int* sptr0, int** p_sptr, int rise_error) {
    enum { kShiftFlag = 1, kFlagCount = 1 };
    int action = rise_error;
    if (action >= 0) {
        const int* action_tbl = &action_list[action_idx[*(*p_sptr - 1)]];
        while (action_tbl[0] >= 0 && action_tbl[0] != tt) { action_tbl += 2; }
        action = action_tbl[1];
    }
    if (action >= 0) {
        if (!(action & kShiftFlag)) {
            const int* info = &reduce_info[action >> kFlagCount];
            const int* goto_tbl = &goto_list[info[1]];
            int state = *((*p_sptr -= info[0]) - 1);
            while (goto_tbl[0] >= 0 && goto_tbl[0] != state) { goto_tbl += 2; }
            *(*p_sptr)++ = goto_tbl[1];
            return predef_act_reduce + info[2];
        }
        *(*p_sptr)++ = action >> kFlagCount;
        return predef_act_shift;
    }
    /* Roll back to state, which can accept error */
    do {
        const int* action_tbl = &action_list[action_idx[*(*p_sptr - 1)]];
        while (action_tbl[0] >= 0 && action_tbl[0] != predef_tt_error) { action_tbl += 2; }
        if (action_tbl[1] >= 0 && (action_tbl[1] & kShiftFlag)) { /* Can recover */
            *(*p_sptr)++ = action_tbl[1] >> kFlagCount;           /* Shift error token */
            break;
        }
    } while (--*p_sptr != sptr0);
    return action;
}
