/* Parsegen autogenerated analyzer file - do not edit! */
/* clang-format off */

static int action_idx[146] = {
    0, 2, 20, 2, 2, 2, 2, 2, 62, 64, 66, 68, 72, 76, 80, 82, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    84, 120, 154, 170, 186, 210, 234, 246, 258, 290, 320, 2, 362, 402, 418, 434, 436, 444, 452, 454, 482, 484, 486, 488,
    530, 532, 534, 536, 548, 550, 552, 556, 558, 562, 566, 570, 572, 574, 586, 588, 592, 596, 602, 606, 608, 612, 614,
    618, 620, 644, 686, 690, 694, 620, 620, 620, 620, 620, 696, 698, 700, 702, 704, 620, 620, 620, 620, 620, 620, 620,
    620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 706, 742, 776, 792, 808, 832, 856, 868, 880, 912, 942,
    620, 984, 1024, 1040, 1056, 1058, 1066, 1074, 1076, 1104, 1106, 1108, 1110, 1152, 1154, 1156, 1158, 1160
};

static int action_list[1162] = {
    -1, 12, 33, 7, 40, 9, 43, 11, 45, 13, 126, 15, 261, 17, 262, 19, 265, 21, -1, -1, 37, 33, 38, 35, 42, 37, 43, 39,
    45, 41, 47, 43, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 260, 123, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274,
    65, 275, 67, 276, 69, -1, -1, -1, 432, -1, 438, -1, 420, 40, 25, -1, -1, 265, 27, -1, -1, 41, 29, -1, -1, -1, 426,
    -1, 330, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 94, 51, 124, 53, 269, 55, 270, 57, 271, 59,
    272, 61, 273, 63, 274, 65, 275, 67, -1, 402, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 94, 51,
    124, 53, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, -1, 396, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 269,
    55, 270, 57, -1, 384, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 269, 55, 270, 57, -1, 372, 37, 33, 42, 37, 43, 39, 45,
    41, 47, 43, 60, 45, 62, 47, 269, 55, 270, 57, 273, 63, 274, 65, -1, 360, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 60,
    45, 62, 47, 269, 55, 270, 57, 273, 63, 274, 65, -1, 354, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, -1, 324, 37, 33,
    42, 37, 43, 39, 45, 41, 47, 43, -1, 318, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 94, 51,
    269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, -1, 342, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60,
    45, 62, 47, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, -1, 348, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41,
    47, 43, 58, 93, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, 275,
    67, 276, 69, -1, -1, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 269,
    55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, 275, 67, 276, 69, -1, 408, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43,
    269, 55, 270, 57, -1, 378, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 269, 55, 270, 57, -1, 366, -1, 306, 37, 33, 42,
    37, 47, 43, -1, 294, 37, 33, 42, 37, 47, 43, -1, 288, -1, 300, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62,
    47, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, -1, 336, -1, 312, -1, 276, -1, 282, 37, 33, 38, 35, 41,
    119, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 269, 55, 270, 57, 271, 59, 272, 61,
    273, 63, 274, 65, 275, 67, 276, 69, -1, -1, -1, 414, -1, 390, -1, -1, 59, 129, 258, 131, 259, 133, 288, 135, 289,
    137, -1, -1, -1, 6, -1, 42, 59, 291, -1, -1, -1, 0, 265, 149, -1, -1, 265, 139, -1, -1, 123, 141, -1, -1, -1, 18,
    -1, 12, 59, 129, 125, 147, 258, 131, 288, 135, 289, 137, -1, -1, -1, 24, 58, 153, -1, 84, 61, 167, -1, -1, 265, 157,
    267, 159, -1, -1, 267, 163, -1, 78, -1, 48, 265, 161, -1, -1, -1, 54, 265, 165, -1, -1, -1, 60, 33, 177, 40, 179,
    43, 181, 45, 183, 126, 185, 261, 187, 262, 189, 263, 191, 264, 193, 265, 157, 267, 159, -1, -1, 37, 197, 38, 199,
    42, 201, 43, 203, 45, 205, 47, 207, 59, 289, 60, 209, 62, 211, 63, 213, 94, 215, 124, 217, 269, 219, 270, 221, 271,
    223, 272, 225, 273, 227, 274, 229, 275, 231, 276, 233, -1, -1, 267, 163, -1, 258, 264, 287, -1, 108, -1, 264, -1,
    90, -1, 96, -1, 102, -1, 66, -1, 168, 37, 197, 38, 199, 42, 201, 43, 203, 45, 205, 47, 207, 60, 209, 62, 211, 94,
    215, 124, 217, 269, 219, 270, 221, 271, 223, 272, 225, 273, 227, 274, 229, 275, 231, -1, 240, 37, 197, 38, 199, 42,
    201, 43, 203, 45, 205, 47, 207, 60, 209, 62, 211, 94, 215, 124, 217, 269, 219, 270, 221, 271, 223, 272, 225, 273,
    227, 274, 229, -1, 234, 37, 197, 42, 201, 43, 203, 45, 205, 47, 207, 269, 219, 270, 221, -1, 222, 37, 197, 42, 201,
    43, 203, 45, 205, 47, 207, 269, 219, 270, 221, -1, 210, 37, 197, 42, 201, 43, 203, 45, 205, 47, 207, 60, 209, 62,
    211, 269, 219, 270, 221, 273, 227, 274, 229, -1, 198, 37, 197, 42, 201, 43, 203, 45, 205, 47, 207, 60, 209, 62, 211,
    269, 219, 270, 221, 273, 227, 274, 229, -1, 192, 37, 197, 42, 201, 43, 203, 45, 205, 47, 207, -1, 162, 37, 197, 42,
    201, 43, 203, 45, 205, 47, 207, -1, 156, 37, 197, 38, 199, 42, 201, 43, 203, 45, 205, 47, 207, 60, 209, 62, 211, 94,
    215, 269, 219, 270, 221, 271, 223, 272, 225, 273, 227, 274, 229, -1, 180, 37, 197, 38, 199, 42, 201, 43, 203, 45,
    205, 47, 207, 60, 209, 62, 211, 269, 219, 270, 221, 271, 223, 272, 225, 273, 227, 274, 229, -1, 186, 37, 197, 38,
    199, 42, 201, 43, 203, 45, 205, 47, 207, 58, 257, 60, 209, 62, 211, 63, 213, 94, 215, 124, 217, 269, 219, 270, 221,
    271, 223, 272, 225, 273, 227, 274, 229, 275, 231, 276, 233, -1, -1, 37, 197, 38, 199, 42, 201, 43, 203, 45, 205, 47,
    207, 60, 209, 62, 211, 63, 213, 94, 215, 124, 217, 269, 219, 270, 221, 271, 223, 272, 225, 273, 227, 274, 229, 275,
    231, 276, 233, -1, 246, 37, 197, 42, 201, 43, 203, 45, 205, 47, 207, 269, 219, 270, 221, -1, 216, 37, 197, 42, 201,
    43, 203, 45, 205, 47, 207, 269, 219, 270, 221, -1, 204, -1, 144, 37, 197, 42, 201, 47, 207, -1, 132, 37, 197, 42,
    201, 47, 207, -1, 126, -1, 138, 37, 197, 42, 201, 43, 203, 45, 205, 47, 207, 60, 209, 62, 211, 269, 219, 270, 221,
    271, 223, 272, 225, 273, 227, 274, 229, -1, 174, -1, 150, -1, 114, -1, 120, 37, 197, 38, 199, 41, 283, 42, 201, 43,
    203, 45, 205, 47, 207, 60, 209, 62, 211, 63, 213, 94, 215, 124, 217, 269, 219, 270, 221, 271, 223, 272, 225, 273,
    227, 274, 229, 275, 231, 276, 233, -1, -1, -1, 252, -1, 228, -1, 72, -1, 30, -1, 36
};

static int reduce_info[222] = {
    2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 8, 1, 6, 6, 2, 6, 6, 0, 2, 6, 0, 1, 6, 0, 1, 64, 4, 2, 64, 5, 3, 64, 6, 1, 68, 0, 2,
    68, 3, 2, 10, 0, 0, 10, 0, 1, 70, 7, 1, 70, 8, 1, 70, 9, 1, 70, 10, 2, 12, 11, 2, 12, 12, 3, 12, 13, 3, 12, 14, 3,
    12, 15, 3, 12, 16, 3, 12, 17, 3, 12, 18, 3, 12, 19, 2, 12, 20, 3, 12, 21, 3, 12, 22, 3, 12, 23, 3, 12, 24, 3, 12,
    25, 3, 12, 26, 3, 12, 27, 3, 12, 28, 3, 12, 29, 2, 12, 30, 3, 12, 31, 3, 12, 32, 5, 12, 33, 3, 12, 34, 1, 12, 35, 1,
    12, 0, 2, 72, 0, 2, 74, 36, 2, 74, 37, 3, 74, 38, 3, 74, 39, 3, 74, 40, 3, 74, 41, 3, 74, 42, 3, 74, 43, 3, 74, 44,
    2, 74, 45, 3, 74, 46, 3, 74, 47, 3, 74, 48, 3, 74, 49, 3, 74, 50, 3, 74, 51, 3, 74, 52, 3, 74, 54, 3, 74, 53, 2, 74,
    55, 3, 74, 56, 3, 74, 57, 5, 74, 58, 3, 74, 59, 0, 126, 60, 5, 74, 61, 1, 74, 0, 1, 74, 0
};

static int goto_list[128] = {
    -1, 0, 71, 72, -1, 62, -1, 63, -1, 71, -1, 75, 88, 142, 89, 140, 90, 139, 91, 138, 92, 97, 98, 137, 99, 136, 100,
    135, 101, 134, 102, 133, 103, 132, 104, 131, 105, 130, 106, 127, 107, 126, 108, 125, 109, 124, 110, 123, 111, 122,
    112, 121, 113, 120, 114, 119, 115, 118, 116, 117, 128, 129, -1, 84, 76, 77, -1, 85, -1, 86, -1, 87, -1, 0, 3, 60, 4,
    58, 5, 57, 6, 56, 7, 15, 16, 55, 17, 54, 18, 53, 19, 52, 20, 51, 21, 50, 22, 49, 23, 48, 24, 45, 25, 44, 26, 43, 27,
    42, 28, 41, 29, 40, 30, 39, 31, 38, 32, 37, 33, 36, 34, 35, 46, 47, -1, 2, -1, 11
};

static int parse(int tt, int* sptr0, int** p_sptr, int rise_error) {
    enum { kShiftFlag = 1, kFlagCount = 1 };
    int action = rise_error;
    if (action >= 0) {
        const int* action_tbl = &action_list[action_idx[*(*p_sptr - 1)]];
        while (action_tbl[0] >= 0 && action_tbl[0] != tt) { action_tbl += 2; }
        action = action_tbl[1];
    }
    if (action >= 0) {
        if (!(action & kShiftFlag)) {
            const int* info = &reduce_info[action >> kFlagCount];
            const int* goto_tbl = &goto_list[info[1]];
            int state = *((*p_sptr -= info[0]) - 1);
            while (goto_tbl[0] >= 0 && goto_tbl[0] != state) { goto_tbl += 2; }
            *(*p_sptr)++ = goto_tbl[1];
            return predef_act_reduce + info[2];
        }
        *(*p_sptr)++ = action >> kFlagCount;
        return predef_act_shift;
    }
    /* Roll back to state, which can accept error */
    do {
        const int* action_tbl = &action_list[action_idx[*(*p_sptr - 1)]];
        while (action_tbl[0] >= 0 && action_tbl[0] != predef_tt_error) { action_tbl += 2; }
        if (action_tbl[1] >= 0 && (action_tbl[1] & kShiftFlag)) { /* Can recover */
            *(*p_sptr)++ = action_tbl[1] >> kFlagCount;           /* Shift error token */
            break;
        }
    } while (--*p_sptr != sptr0);
    return action;
}
