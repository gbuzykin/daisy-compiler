/* Parsegen autogenerated analyzer file - do not edit! */
/* clang-format off */

static int action_idx[151] = {
    0, 2, 20, 2, 2, 2, 2, 2, 62, 64, 66, 68, 72, 76, 80, 82, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    84, 120, 154, 170, 186, 210, 234, 246, 258, 290, 320, 2, 362, 402, 418, 434, 436, 444, 452, 454, 482, 484, 486, 488,
    530, 532, 534, 536, 548, 550, 552, 556, 558, 562, 566, 572, 574, 578, 582, 588, 590, 594, 596, 600, 602, 606, 608,
    632, 672, 676, 678, 608, 608, 608, 608, 608, 682, 684, 686, 688, 690, 608, 608, 608, 608, 608, 608, 608, 608, 608,
    608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 692, 728, 762, 778, 794, 818, 842, 854, 866, 898, 928, 608, 970,
    1010, 1026, 1042, 1044, 1052, 1060, 1062, 1090, 1092, 1094, 1096, 1138, 1140, 1142, 562, 1144, 1146, 1148, 1152,
    1154, 1156, 1168, 1170
};

static int action_list[1172] = {
    -1, 12, 33, 7, 40, 9, 43, 11, 45, 13, 126, 15, 261, 17, 262, 19, 265, 21, -1, -1, 37, 33, 38, 35, 42, 37, 43, 39,
    45, 41, 47, 43, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 260, 123, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274,
    65, 275, 67, 276, 69, -1, -1, -1, 456, -1, 462, -1, 444, 40, 25, -1, -1, 265, 27, -1, -1, 41, 29, -1, -1, -1, 450,
    -1, 354, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 94, 51, 124, 53, 269, 55, 270, 57, 271, 59,
    272, 61, 273, 63, 274, 65, 275, 67, -1, 426, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 94, 51,
    124, 53, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, -1, 420, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 269,
    55, 270, 57, -1, 408, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 269, 55, 270, 57, -1, 396, 37, 33, 42, 37, 43, 39, 45,
    41, 47, 43, 60, 45, 62, 47, 269, 55, 270, 57, 273, 63, 274, 65, -1, 384, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 60,
    45, 62, 47, 269, 55, 270, 57, 273, 63, 274, 65, -1, 378, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, -1, 348, 37, 33,
    42, 37, 43, 39, 45, 41, 47, 43, -1, 342, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 94, 51,
    269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, -1, 366, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60,
    45, 62, 47, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, -1, 372, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41,
    47, 43, 58, 93, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, 275,
    67, 276, 69, -1, -1, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 269,
    55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, 275, 67, 276, 69, -1, 432, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43,
    269, 55, 270, 57, -1, 402, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 269, 55, 270, 57, -1, 390, -1, 330, 37, 33, 42,
    37, 47, 43, -1, 318, 37, 33, 42, 37, 47, 43, -1, 312, -1, 324, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62,
    47, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, -1, 360, -1, 336, -1, 300, -1, 306, 37, 33, 38, 35, 41,
    119, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 269, 55, 270, 57, 271, 59, 272, 61,
    273, 63, 274, 65, 275, 67, 276, 69, -1, -1, -1, 438, -1, 414, -1, -1, 59, 129, 258, 131, 259, 133, 288, 135, 289,
    137, -1, -1, -1, 6, -1, 42, 59, 301, -1, -1, -1, 0, 265, 291, -1, -1, 265, 143, -1, -1, 44, 285, 59, 287, -1, -1,
    -1, 48, 58, 147, -1, 78, 61, 163, -1, -1, 265, 153, 267, 155, -1, -1, -1, 72, 267, 159, -1, 66, -1, 240, 265, 157,
    -1, -1, -1, 246, 265, 161, -1, -1, -1, 252, 33, 173, 40, 175, 43, 177, 45, 179, 126, 181, 261, 183, 262, 185, 263,
    187, 264, 189, 265, 153, 267, 155, -1, -1, 37, 193, 38, 195, 42, 197, 43, 199, 45, 201, 47, 203, 60, 205, 62, 207,
    63, 209, 94, 211, 124, 213, 269, 215, 270, 217, 271, 219, 272, 221, 273, 223, 274, 225, 275, 227, 276, 229, -1, 60,
    267, 159, -1, 228, -1, 234, 264, 283, -1, 288, -1, 270, -1, 276, -1, 282, -1, 258, -1, 138, 37, 193, 38, 195, 42,
    197, 43, 199, 45, 201, 47, 203, 60, 205, 62, 207, 94, 211, 124, 213, 269, 215, 270, 217, 271, 219, 272, 221, 273,
    223, 274, 225, 275, 227, -1, 210, 37, 193, 38, 195, 42, 197, 43, 199, 45, 201, 47, 203, 60, 205, 62, 207, 94, 211,
    124, 213, 269, 215, 270, 217, 271, 219, 272, 221, 273, 223, 274, 225, -1, 204, 37, 193, 42, 197, 43, 199, 45, 201,
    47, 203, 269, 215, 270, 217, -1, 192, 37, 193, 42, 197, 43, 199, 45, 201, 47, 203, 269, 215, 270, 217, -1, 180, 37,
    193, 42, 197, 43, 199, 45, 201, 47, 203, 60, 205, 62, 207, 269, 215, 270, 217, 273, 223, 274, 225, -1, 168, 37, 193,
    42, 197, 43, 199, 45, 201, 47, 203, 60, 205, 62, 207, 269, 215, 270, 217, 273, 223, 274, 225, -1, 162, 37, 193, 42,
    197, 43, 199, 45, 201, 47, 203, -1, 132, 37, 193, 42, 197, 43, 199, 45, 201, 47, 203, -1, 126, 37, 193, 38, 195, 42,
    197, 43, 199, 45, 201, 47, 203, 60, 205, 62, 207, 94, 211, 269, 215, 270, 217, 271, 219, 272, 221, 273, 223, 274,
    225, -1, 150, 37, 193, 38, 195, 42, 197, 43, 199, 45, 201, 47, 203, 60, 205, 62, 207, 269, 215, 270, 217, 271, 219,
    272, 221, 273, 223, 274, 225, -1, 156, 37, 193, 38, 195, 42, 197, 43, 199, 45, 201, 47, 203, 58, 253, 60, 205, 62,
    207, 63, 209, 94, 211, 124, 213, 269, 215, 270, 217, 271, 219, 272, 221, 273, 223, 274, 225, 275, 227, 276, 229, -1,
    -1, 37, 193, 38, 195, 42, 197, 43, 199, 45, 201, 47, 203, 60, 205, 62, 207, 63, 209, 94, 211, 124, 213, 269, 215,
    270, 217, 271, 219, 272, 221, 273, 223, 274, 225, 275, 227, 276, 229, -1, 216, 37, 193, 42, 197, 43, 199, 45, 201,
    47, 203, 269, 215, 270, 217, -1, 186, 37, 193, 42, 197, 43, 199, 45, 201, 47, 203, 269, 215, 270, 217, -1, 174, -1,
    114, 37, 193, 42, 197, 47, 203, -1, 102, 37, 193, 42, 197, 47, 203, -1, 96, -1, 108, 37, 193, 42, 197, 43, 199, 45,
    201, 47, 203, 60, 205, 62, 207, 269, 215, 270, 217, 271, 219, 272, 221, 273, 223, 274, 225, -1, 144, -1, 120, -1,
    84, -1, 90, 37, 193, 38, 195, 41, 279, 42, 197, 43, 199, 45, 201, 47, 203, 60, 205, 62, 207, 63, 209, 94, 211, 124,
    213, 269, 215, 270, 217, 271, 219, 272, 221, 273, 223, 274, 225, 275, 227, 276, 229, -1, -1, -1, 222, -1, 198, -1,
    264, -1, 30, -1, 54, 123, 293, -1, -1, -1, 18, -1, 12, 59, 129, 125, 299, 258, 131, 288, 135, 289, 137, -1, -1, -1,
    24, -1, 36
};

static int reduce_info[234] = {
    2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 8, 1, 6, 6, 2, 3, 6, 0, 2, 6, 0, 1, 6, 0, 1, 10, 0, 3, 10, 0, 4, 12, 36, 1, 70, 0, 2,
    16, 0, 0, 16, 0, 2, 18, 11, 2, 18, 12, 3, 18, 13, 3, 18, 14, 3, 18, 15, 3, 18, 16, 3, 18, 17, 3, 18, 18, 3, 18, 19,
    2, 18, 20, 3, 18, 21, 3, 18, 22, 3, 18, 23, 3, 18, 24, 3, 18, 25, 3, 18, 26, 3, 18, 27, 3, 18, 28, 3, 18, 29, 2, 18,
    30, 3, 18, 31, 3, 18, 32, 5, 18, 33, 3, 18, 34, 1, 18, 35, 1, 18, 0, 1, 72, 4, 2, 72, 5, 3, 72, 6, 1, 78, 0, 2, 78,
    3, 1, 76, 7, 1, 76, 8, 1, 76, 9, 1, 76, 10, 2, 80, 0, 2, 82, 37, 2, 82, 38, 3, 82, 39, 3, 82, 40, 3, 82, 41, 3, 82,
    42, 3, 82, 43, 3, 82, 44, 3, 82, 45, 2, 82, 46, 3, 82, 47, 3, 82, 48, 3, 82, 49, 3, 82, 50, 3, 82, 51, 3, 82, 52, 3,
    82, 53, 3, 82, 55, 3, 82, 54, 2, 82, 56, 3, 82, 57, 3, 82, 58, 5, 82, 59, 3, 82, 60, 0, 134, 61, 5, 82, 62, 1, 82,
    0, 1, 82, 0
};

static int goto_list[136] = {
    -1, 0, 147, 148, -1, 62, -1, 63, -1, 147, -1, 69, 142, 144, -1, 70, -1, 72, 86, 140, 87, 138, 88, 137, 89, 136, 90,
    95, 96, 135, 97, 134, 98, 133, 99, 132, 100, 131, 101, 130, 102, 129, 103, 128, 104, 125, 105, 124, 106, 123, 107,
    122, 108, 121, 109, 120, 110, 119, 111, 118, 112, 117, 113, 116, 114, 115, 126, 127, -1, 82, -1, 74, 73, 75, -1, 83,
    -1, 84, -1, 85, -1, 0, 3, 60, 4, 58, 5, 57, 6, 56, 7, 15, 16, 55, 17, 54, 18, 53, 19, 52, 20, 51, 21, 50, 22, 49,
    23, 48, 24, 45, 25, 44, 26, 43, 27, 42, 28, 41, 29, 40, 30, 39, 31, 38, 32, 37, 33, 36, 34, 35, 46, 47, -1, 2, -1,
    11
};

static int parse(int tt, int* sptr0, int** p_sptr, int rise_error) {
    enum { kShiftFlag = 1, kFlagCount = 1 };
    int action = rise_error;
    if (action >= 0) {
        const int* action_tbl = &action_list[action_idx[*(*p_sptr - 1)]];
        while (action_tbl[0] >= 0 && action_tbl[0] != tt) { action_tbl += 2; }
        action = action_tbl[1];
    }
    if (action >= 0) {
        if (!(action & kShiftFlag)) {
            const int* info = &reduce_info[action >> kFlagCount];
            const int* goto_tbl = &goto_list[info[1]];
            int state = *((*p_sptr -= info[0]) - 1);
            while (goto_tbl[0] >= 0 && goto_tbl[0] != state) { goto_tbl += 2; }
            *(*p_sptr)++ = goto_tbl[1];
            return predef_act_reduce + info[2];
        }
        *(*p_sptr)++ = action >> kFlagCount;
        return predef_act_shift;
    }
    /* Roll back to state, which can accept error */
    do {
        const int* action_tbl = &action_list[action_idx[*(*p_sptr - 1)]];
        while (action_tbl[0] >= 0 && action_tbl[0] != predef_tt_error) { action_tbl += 2; }
        if (action_tbl[1] >= 0 && (action_tbl[1] & kShiftFlag)) { /* Can recover */
            *(*p_sptr)++ = action_tbl[1] >> kFlagCount;           /* Shift error token */
            break;
        }
    } while (--*p_sptr != sptr0);
    return action;
}
