/* Parsegen autogenerated analyzer file - do not edit! */
/* clang-format off */

static int action_idx[149] = {
    0, 2, 20, 2, 2, 2, 2, 2, 62, 64, 66, 68, 72, 76, 80, 82, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    84, 120, 154, 170, 186, 210, 234, 246, 258, 290, 320, 2, 362, 402, 418, 434, 436, 444, 452, 454, 482, 484, 486, 488,
    530, 532, 534, 536, 548, 550, 552, 556, 558, 562, 566, 570, 572, 574, 586, 588, 594, 598, 602, 608, 612, 614, 618,
    620, 624, 626, 650, 690, 694, 698, 626, 626, 626, 626, 626, 700, 702, 704, 706, 708, 626, 626, 626, 626, 626, 626,
    626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 710, 746, 780, 796, 812, 836, 860, 872, 884, 916,
    946, 626, 988, 1028, 1044, 1060, 1062, 1070, 1078, 1080, 1108, 1110, 1112, 1114, 1156, 1158, 1160, 558, 1162, 1164,
    1166
};

static int action_list[1168] = {
    -1, 12, 33, 7, 40, 9, 43, 11, 45, 13, 126, 15, 261, 17, 262, 19, 265, 21, -1, -1, 37, 33, 38, 35, 42, 37, 43, 39,
    45, 41, 47, 43, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 260, 123, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274,
    65, 275, 67, 276, 69, -1, -1, -1, 444, -1, 450, -1, 432, 40, 25, -1, -1, 265, 27, -1, -1, 41, 29, -1, -1, -1, 438,
    -1, 342, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 94, 51, 124, 53, 269, 55, 270, 57, 271, 59,
    272, 61, 273, 63, 274, 65, 275, 67, -1, 414, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 94, 51,
    124, 53, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, -1, 408, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 269,
    55, 270, 57, -1, 396, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 269, 55, 270, 57, -1, 384, 37, 33, 42, 37, 43, 39, 45,
    41, 47, 43, 60, 45, 62, 47, 269, 55, 270, 57, 273, 63, 274, 65, -1, 372, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 60,
    45, 62, 47, 269, 55, 270, 57, 273, 63, 274, 65, -1, 366, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, -1, 336, 37, 33,
    42, 37, 43, 39, 45, 41, 47, 43, -1, 330, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 94, 51,
    269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, -1, 354, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60,
    45, 62, 47, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, -1, 360, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41,
    47, 43, 58, 93, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, 275,
    67, 276, 69, -1, -1, 37, 33, 38, 35, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 269,
    55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, 275, 67, 276, 69, -1, 420, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43,
    269, 55, 270, 57, -1, 390, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 269, 55, 270, 57, -1, 378, -1, 318, 37, 33, 42,
    37, 47, 43, -1, 306, 37, 33, 42, 37, 47, 43, -1, 300, -1, 312, 37, 33, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62,
    47, 269, 55, 270, 57, 271, 59, 272, 61, 273, 63, 274, 65, -1, 348, -1, 324, -1, 288, -1, 294, 37, 33, 38, 35, 41,
    119, 42, 37, 43, 39, 45, 41, 47, 43, 60, 45, 62, 47, 63, 49, 94, 51, 124, 53, 269, 55, 270, 57, 271, 59, 272, 61,
    273, 63, 274, 65, 275, 67, 276, 69, -1, -1, -1, 426, -1, 402, -1, -1, 59, 129, 258, 131, 259, 133, 288, 135, 289,
    137, -1, -1, -1, 6, -1, 42, 59, 297, -1, -1, -1, 0, 265, 151, -1, -1, 265, 139, -1, -1, 123, 141, -1, -1, -1, 18,
    -1, 12, 59, 129, 125, 147, 258, 131, 288, 135, 289, 137, -1, -1, -1, 24, 44, 291, 59, 293, -1, -1, 58, 155, -1, 96,
    61, 169, -1, -1, 265, 159, 267, 161, -1, -1, 267, 165, -1, 90, -1, 60, 265, 163, -1, -1, -1, 66, 265, 167, -1, -1,
    -1, 72, 33, 179, 40, 181, 43, 183, 45, 185, 126, 187, 261, 189, 262, 191, 263, 193, 264, 195, 265, 159, 267, 161,
    -1, -1, 37, 199, 38, 201, 42, 203, 43, 205, 45, 207, 47, 209, 60, 211, 62, 213, 63, 215, 94, 217, 124, 219, 269,
    221, 270, 223, 271, 225, 272, 227, 273, 229, 274, 231, 275, 233, 276, 235, -1, 48, 267, 165, -1, 270, 264, 289, -1,
    120, -1, 276, -1, 102, -1, 108, -1, 114, -1, 78, -1, 180, 37, 199, 38, 201, 42, 203, 43, 205, 45, 207, 47, 209, 60,
    211, 62, 213, 94, 217, 124, 219, 269, 221, 270, 223, 271, 225, 272, 227, 273, 229, 274, 231, 275, 233, -1, 252, 37,
    199, 38, 201, 42, 203, 43, 205, 45, 207, 47, 209, 60, 211, 62, 213, 94, 217, 124, 219, 269, 221, 270, 223, 271, 225,
    272, 227, 273, 229, 274, 231, -1, 246, 37, 199, 42, 203, 43, 205, 45, 207, 47, 209, 269, 221, 270, 223, -1, 234, 37,
    199, 42, 203, 43, 205, 45, 207, 47, 209, 269, 221, 270, 223, -1, 222, 37, 199, 42, 203, 43, 205, 45, 207, 47, 209,
    60, 211, 62, 213, 269, 221, 270, 223, 273, 229, 274, 231, -1, 210, 37, 199, 42, 203, 43, 205, 45, 207, 47, 209, 60,
    211, 62, 213, 269, 221, 270, 223, 273, 229, 274, 231, -1, 204, 37, 199, 42, 203, 43, 205, 45, 207, 47, 209, -1, 174,
    37, 199, 42, 203, 43, 205, 45, 207, 47, 209, -1, 168, 37, 199, 38, 201, 42, 203, 43, 205, 45, 207, 47, 209, 60, 211,
    62, 213, 94, 217, 269, 221, 270, 223, 271, 225, 272, 227, 273, 229, 274, 231, -1, 192, 37, 199, 38, 201, 42, 203,
    43, 205, 45, 207, 47, 209, 60, 211, 62, 213, 269, 221, 270, 223, 271, 225, 272, 227, 273, 229, 274, 231, -1, 198,
    37, 199, 38, 201, 42, 203, 43, 205, 45, 207, 47, 209, 58, 259, 60, 211, 62, 213, 63, 215, 94, 217, 124, 219, 269,
    221, 270, 223, 271, 225, 272, 227, 273, 229, 274, 231, 275, 233, 276, 235, -1, -1, 37, 199, 38, 201, 42, 203, 43,
    205, 45, 207, 47, 209, 60, 211, 62, 213, 63, 215, 94, 217, 124, 219, 269, 221, 270, 223, 271, 225, 272, 227, 273,
    229, 274, 231, 275, 233, 276, 235, -1, 258, 37, 199, 42, 203, 43, 205, 45, 207, 47, 209, 269, 221, 270, 223, -1,
    228, 37, 199, 42, 203, 43, 205, 45, 207, 47, 209, 269, 221, 270, 223, -1, 216, -1, 156, 37, 199, 42, 203, 47, 209,
    -1, 144, 37, 199, 42, 203, 47, 209, -1, 138, -1, 150, 37, 199, 42, 203, 43, 205, 45, 207, 47, 209, 60, 211, 62, 213,
    269, 221, 270, 223, 271, 225, 272, 227, 273, 229, 274, 231, -1, 186, -1, 162, -1, 126, -1, 132, 37, 199, 38, 201,
    41, 285, 42, 203, 43, 205, 45, 207, 47, 209, 60, 211, 62, 213, 63, 215, 94, 217, 124, 219, 269, 221, 270, 223, 271,
    225, 272, 227, 273, 229, 274, 231, 275, 233, 276, 235, -1, -1, -1, 264, -1, 240, -1, 84, -1, 30, -1, 54, -1, 36
};

static int reduce_info[228] = {
    2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 8, 1, 6, 6, 2, 3, 6, 0, 2, 6, 0, 1, 6, 0, 4, 10, 3, 3, 10, 0, 1, 68, 5, 2, 68, 6, 3,
    68, 7, 1, 72, 0, 2, 72, 4, 2, 14, 0, 0, 14, 0, 1, 74, 8, 1, 74, 9, 1, 74, 10, 1, 74, 11, 2, 16, 12, 2, 16, 13, 3,
    16, 14, 3, 16, 15, 3, 16, 16, 3, 16, 17, 3, 16, 18, 3, 16, 19, 3, 16, 20, 2, 16, 21, 3, 16, 22, 3, 16, 23, 3, 16,
    24, 3, 16, 25, 3, 16, 26, 3, 16, 27, 3, 16, 28, 3, 16, 29, 3, 16, 30, 2, 16, 31, 3, 16, 32, 3, 16, 33, 5, 16, 34, 3,
    16, 35, 1, 16, 36, 1, 16, 0, 2, 76, 0, 2, 78, 37, 2, 78, 38, 3, 78, 39, 3, 78, 40, 3, 78, 41, 3, 78, 42, 3, 78, 43,
    3, 78, 44, 3, 78, 45, 2, 78, 46, 3, 78, 47, 3, 78, 48, 3, 78, 49, 3, 78, 50, 3, 78, 51, 3, 78, 52, 3, 78, 53, 3, 78,
    55, 3, 78, 54, 2, 78, 56, 3, 78, 57, 3, 78, 58, 5, 78, 59, 3, 78, 60, 0, 130, 61, 5, 78, 62, 1, 78, 0, 1, 78, 0
};

static int goto_list[132] = {
    -1, 0, 71, 72, -1, 62, -1, 63, -1, 71, 145, 147, -1, 74, -1, 76, 89, 143, 90, 141, 91, 140, 92, 139, 93, 98, 99,
    138, 100, 137, 101, 136, 102, 135, 103, 134, 104, 133, 105, 132, 106, 131, 107, 128, 108, 127, 109, 126, 110, 125,
    111, 124, 112, 123, 113, 122, 114, 121, 115, 120, 116, 119, 117, 118, 129, 130, -1, 85, 77, 78, -1, 86, -1, 87, -1,
    88, -1, 0, 3, 60, 4, 58, 5, 57, 6, 56, 7, 15, 16, 55, 17, 54, 18, 53, 19, 52, 20, 51, 21, 50, 22, 49, 23, 48, 24,
    45, 25, 44, 26, 43, 27, 42, 28, 41, 29, 40, 30, 39, 31, 38, 32, 37, 33, 36, 34, 35, 46, 47, -1, 2, -1, 11
};

static int parse(int tt, int* sptr0, int** p_sptr, int rise_error) {
    enum { kShiftFlag = 1, kFlagCount = 1 };
    int action = rise_error;
    if (action >= 0) {
        const int* action_tbl = &action_list[action_idx[*(*p_sptr - 1)]];
        while (action_tbl[0] >= 0 && action_tbl[0] != tt) { action_tbl += 2; }
        action = action_tbl[1];
    }
    if (action >= 0) {
        if (!(action & kShiftFlag)) {
            const int* info = &reduce_info[action >> kFlagCount];
            const int* goto_tbl = &goto_list[info[1]];
            int state = *((*p_sptr -= info[0]) - 1);
            while (goto_tbl[0] >= 0 && goto_tbl[0] != state) { goto_tbl += 2; }
            *(*p_sptr)++ = goto_tbl[1];
            return predef_act_reduce + info[2];
        }
        *(*p_sptr)++ = action >> kFlagCount;
        return predef_act_shift;
    }
    /* Roll back to state, which can accept error */
    do {
        const int* action_tbl = &action_list[action_idx[*(*p_sptr - 1)]];
        while (action_tbl[0] >= 0 && action_tbl[0] != predef_tt_error) { action_tbl += 2; }
        if (action_tbl[1] >= 0 && (action_tbl[1] & kShiftFlag)) { /* Can recover */
            *(*p_sptr)++ = action_tbl[1] >> kFlagCount;           /* Shift error token */
            break;
        }
    } while (--*p_sptr != sptr0);
    return action;
}
