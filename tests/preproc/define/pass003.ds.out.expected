./preproc/define/pass003.ds:3:1: debug: token
 3 | const s = CONCAT  ("a, b", "c, d");
   | ^~~~~
./preproc/define/pass003.ds:3:7: debug: id: s
 3 | const s = CONCAT  ("a, b", "c, d");
   |       ^
./preproc/define/pass003.ds:3:9: debug: token
 3 | const s = CONCAT  ("a, b", "c, d");
   |         ^
./preproc/define/pass003.ds:3:11: debug: token
 3 | const s = CONCAT  ("a, b", "c, d");
   |           ^~~~~~~~~~~~~~~~~~~~~~~~
./preproc/define/pass003.ds:1:22: note: expanded from macro `CONCAT`
 1 | #define CONCAT(a, b) (a b)
   |                      ^
./preproc/define/pass003.ds:3:20: debug: string: "a, b"
 3 | const s = CONCAT  ("a, b", "c, d");
   |                    ^~~~~~
./preproc/define/pass003.ds:3:28: debug: string: "c, d"
 3 | const s = CONCAT  ("a, b", "c, d");
   |                            ^~~~~~
./preproc/define/pass003.ds:3:11: debug: token
 3 | const s = CONCAT  ("a, b", "c, d");
   |           ^~~~~~~~~~~~~~~~~~~~~~~~
./preproc/define/pass003.ds:1:26: note: expanded from macro `CONCAT`
 1 | #define CONCAT(a, b) (a b)
   |                          ^
./preproc/define/pass003.ds:3:35: debug: token
 3 | const s = CONCAT  ("a, b", "c, d");
   |                                   ^
./preproc/define/pass003.ds: info: warnings 0, errors 0
